generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id              Int       @id @default(autoincrement())
  account_number  String    @unique @db.VarChar(20)
  account_balance Decimal   @db.Decimal(15, 2)
  id_customer     Int
  customers       customers @relation(fields: [id_customer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model admins {
  id            Int     @id @default(autoincrement())
  username      String  @unique @db.VarChar(50)
  password      String  @db.VarChar(100)
  refresh_token String?
}

model banks {
  id                                                 Int            @id @default(autoincrement())
  name                                               String         @db.VarChar(100)
  public_key                                         String
  contacts                                           contacts[]
  transactions_transactions_id_recipient_bankTobanks transactions[] @relation("transactions_id_recipient_bankTobanks")
  transactions_transactions_id_sender_bankTobanks    transactions[] @relation("transactions_id_sender_bankTobanks")
}

model contacts {
  id                     Int       @id @default(autoincrement())
  id_customer            Int
  contact_account_number String    @db.VarChar(20)
  id_bank                Int
  nickname               String?   @db.VarChar(100)
  banks                  banks     @relation(fields: [id_bank], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers              customers @relation(fields: [id_customer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model customers {
  id                                 Int              @id @default(autoincrement())
  username                           String           @unique @db.VarChar(50)
  password                           String           @db.VarChar(100)
  fullname                           String           @db.VarChar(100)
  email                              String           @unique @db.VarChar(100)
  phone                              String           @unique @db.VarChar(15)
  refresh_token                      String?
  accounts                           accounts[]
  contacts                           contacts[]
  debt_deletions                     debt_deletions[]
  debts_debts_id_creditorTocustomers debts[]          @relation("debts_id_creditorTocustomers")
  debts_debts_id_debtorTocustomers   debts[]          @relation("debts_id_debtorTocustomers")
  deposits                           deposits[]
  notifications                      notifications[]
}

model debt_deletions {
  id             Int       @id @default(autoincrement())
  id_debt        Int
  id_deleter     Int
  delete_message String?
  deletion_time  DateTime  @db.Timestamp(6)
  debts          debts     @relation(fields: [id_debt], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers      customers @relation(fields: [id_deleter], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model debt_payments {
  id             Int          @id @default(autoincrement())
  id_debt        Int
  id_transaction Int
  debts          debts        @relation(fields: [id_debt], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions   transactions @relation(fields: [id_transaction], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model debts {
  id             Int              @id @default(autoincrement())
  id_creditor    Int
  id_debtor      Int
  debt_amount    Decimal          @db.Decimal(15, 2)
  debt_message   String?
  status         String?          @db.VarChar(10)
  created_at     DateTime         @db.Timestamp(6)
  debt_deletions debt_deletions[]
  debt_payments  debt_payments[]
  creditor       customers        @relation("debts_id_creditorTocustomers", fields: [id_creditor], references: [id], onDelete: NoAction, onUpdate: NoAction)
  debtor         customers        @relation("debts_id_debtorTocustomers", fields: [id_debtor], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model deposits {
  id              Int       @id @default(autoincrement())
  id_employee     Int
  id_customer     Int
  deposit_amount  Decimal   @db.Decimal(15, 2)
  deposit_message String?
  deposit_time    DateTime  @db.Timestamp(6)
  customers       customers @relation(fields: [id_customer], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employees       employees @relation(fields: [id_employee], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employees {
  id            Int        @id @default(autoincrement())
  username      String     @unique @db.VarChar(50)
  password      String     @db.VarChar(100)
  fullname      String     @db.VarChar(100)
  email         String     @unique @db.VarChar(100)
  phone         String     @unique @db.VarChar(15)
  refresh_token String?
  deposits      deposits[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model notifications {
  id                 Int       @id @default(autoincrement())
  id_recipient       Int
  recipient_type     String?   @db.VarChar(10)
  notification_title String    @db.VarChar(100)
  notification_body  String
  notification_data  Json?
  is_read            Boolean?  @default(false)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  customers          customers @relation(fields: [id_recipient], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transactions {
  id                                          Int             @id @default(autoincrement())
  sender_account_number                       String          @db.VarChar(20)
  id_sender_bank                              Int
  recipient_account_number                    String          @db.VarChar(20)
  id_recipient_bank                           Int
  transaction_amount                          Decimal         @db.Decimal(15, 2)
  transaction_message                         String?
  fee_payment_method                          String?         @db.VarChar(10)
  transaction_time                            DateTime        @db.Timestamp(6)
  digital_signature                           String?
  recipient_name                              String?         @db.VarChar(100)
  debt_payments                               debt_payments[]
  banks_transactions_id_recipient_bankTobanks banks           @relation("transactions_id_recipient_bankTobanks", fields: [id_recipient_bank], references: [id], onDelete: NoAction, onUpdate: NoAction)
  banks_transactions_id_sender_bankTobanks    banks           @relation("transactions_id_sender_bankTobanks", fields: [id_sender_bank], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
